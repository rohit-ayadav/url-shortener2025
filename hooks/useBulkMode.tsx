"use client";
import React, { useEffect, useState } from 'react';
import { ToastAction } from '@/components/ui/toast';
import { useToast } from './use-toast';
import { isValidURL } from '@/utils/utils';
import BulkShort from '@/action/doBulkShort';

const useBulkMode = () => {
    const [loading, setLoading] = useState(false);
    const [length, setLength] = useState(4);
    const [prefix, setPrefix] = useState('');
    const [expirationDate, setExpirationDate] = useState<Date | null>(null);
    const [shortenedURLs, setShortenedURLs] = useState<{ original: string; shortened: string; createdAt?: string; expiresAt?: string }[]>([]);
    const [error, setError] = useState('');
    const toast = useToast();
    const [urlCount, setUrlCount] = useState(0);
    const [urls, setUrls] = useState('');

    useEffect(() => {
        setUrlCount(urls.split('\n').filter(u => u.trim()).length);
    }, [urls]);

    const handleShortenMultiple = async () => {
        setError('');
        setShortenedURLs([]);

        if (!urls) {
            setError('Please enter URLs');
            toast.toast({
                title: 'Error',
                description: 'Please enter URLs',
                variant: 'destructive',
            });
            return;
        }
        if (!navigator.onLine) {
            setError('No internet connection');
            return;
        }

        setLoading(true);
        try {
            const urlList = urls.split('\n').filter(u => u.trim());
            if (urlList.length > 1000) {
                setError('Maximum 1000 URLs allowed at once');
                toast.toast({
                    title: 'Error',
                    description: 'Maximum 1000 URLs allowed at once',
                    variant: 'destructive',
                });
                return;
            }
            if (urlList.length === 0) {
                setError('Please enter URLs');
                toast.toast({
                    title: 'Error',
                    description: 'Please enter URLs',
                    variant: 'destructive',
                });
                return;
            }

            const invalidUrls = urlList.filter(url => {
                return !isValidURL(url.trim());
            });

            if (invalidUrls.length > 0) {
                setError(`${invalidUrls.length} Invalid URLs detected: ${invalidUrls.slice(0, 3).join(', ')}${invalidUrls.length > 3 ? '...' : ''}`);
                toast.toast({
                    title: `${invalidUrls.length} Invalid URLs detected...`,
                    description: `Keep each URL in a new line`,
                    variant: 'destructive',
                });
                return;
            }

            toast.toast({
                title: 'Shortening URLs...',
                description: 'Please wait...',
                variant: 'default',
            });
            const { shortenedURLs, error, invalidUrls: bulkInvalidUrls } = await BulkShort(urlList, prefix, length, expirationDate);
            if (error) {
                setError(error);
                toast.toast({
                    title: 'Error',
                    description: error,
                    variant: 'destructive',
                });
                return;
            }
            if (bulkInvalidUrls) {
                setError(`Invalid URLs detected: ${bulkInvalidUrls.slice(0, 3).join(', ')}${bulkInvalidUrls.length > 3 ? '...' : ''}`);
                toast.toast({
                    title: 'Invalid URLs detected...',
                    description: `Keep each URL in a new line`,
                    variant: 'destructive',
                });
                return;
            }
            if (shortenedURLs) {
                setShortenedURLs(shortenedURLs);
            }

            setError('');
        } catch (err: any) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    const handleClear = () => {
        setShortenedURLs([]);
        setUrls('');
        setError('');
    };

    const handleDownloadCSV = () => {
        const header = "Original URL,Shortened URL,Date Created,Expires At\n";
        const csvContent = shortenedURLs
            .map(url => {
                const createdAt = url.createdAt ?? '';
                const expiresAt = url.expiresAt ?? (createdAt ? new Date(new Date(createdAt).setDate(new Date(createdAt).getDate() + 90)).toISOString().split('T')[0] : '90 days from creation');

                return `"${url.original}","${url.shortened}","${createdAt}","${expiresAt}"`;
            })
            .join("\n");

        const footer = `\n\nThis file was generated by RUShort.\nVisit RUShort: https://rushort.site to shorten your URLs.\nFollow Resources and Updates: https://whatsapp.com/channel/0029VaVd6px8KMqnZk7qGJ2t for job/internship updates.`;

        const csv = header + csvContent + footer;

        const blob = new Blob([csv], { type: "text/csv" });
        const url = URL.createObjectURL(blob);

        const a = document.createElement("a");
        a.href = url;
        a.download = `RUShort-Bulk-Shortened-URLs-${new Date().toISOString().split("T")[0]}.csv`;
        a.click();

        URL.revokeObjectURL(url);
    };

    const handleReadCSV = (event: any) => {
        const file = event.target.files?.[0];
        if (!file) {
            toast.toast({
                title: 'Error',
                description: 'No file selected',
                variant: 'destructive',
            });
            return;
        }

        const reader = new FileReader();
        reader.onload = (e: any) => {
            const content = e.target.result;
            const lines = content.split("\n");
            const originalUrls: string[] = [];

            for (let i = 1; i < lines.length; i++) {
                const row = lines[i].split(",");
                if (row.length >= 1) {
                    const originalUrl = row[0].replace(/"/g, "");
                    if (originalUrl) {
                        originalUrls.push(originalUrl);
                    }
                } else {
                    toast.toast({
                        title: 'Error',
                        description: 'Invalid CSV file',
                        variant: 'destructive',
                    });
                    return;
                }
            }
            console.log(originalUrls);
            setUrls(originalUrls.join("\n"));
            toast.toast({
                title: 'CSV file uploaded',
                description: 'URLs are ready to be shortened',
                variant: 'default',
            });
        };
        reader.readAsText(file);
    };

    return {
        urls,
        setUrls,
        loading,
        length,
        setLength,
        prefix,
        setPrefix,
        shortenedURLs,
        error,
        setExpirationDate,
        handleShortenMultiple,
        handleClear,
        urlCount,
        handleReadCSV,
        handleDownloadCSV,
    }
}

export default useBulkMode;